// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace WebScheduler.DataMigrations.CompiledModels
{
    internal partial class OrleansRemindersTableEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "WebScheduler.DataMigrations.OrleansRemindersTable",
                typeof(OrleansRemindersTable),
                baseEntityType);

            var serviceId = runtimeEntityType.AddProperty(
                "ServiceId",
                typeof(string),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("ServiceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<ServiceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                maxLength: 150);
            serviceId.AddAnnotation("MySql:CharSet", "utf8");

            var grainId = runtimeEntityType.AddProperty(
                "GrainId",
                typeof(string),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("GrainId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<GrainId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                maxLength: 150);

            var reminderName = runtimeEntityType.AddProperty(
                "ReminderName",
                typeof(string),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("ReminderName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<ReminderName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                maxLength: 150);
            reminderName.AddAnnotation("MySql:CharSet", "utf8");

            var grainHash = runtimeEntityType.AddProperty(
                "GrainHash",
                typeof(int),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("GrainHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<GrainHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var period = runtimeEntityType.AddProperty(
                "Period",
                typeof(long),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("Period", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<Period>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var startTime = runtimeEntityType.AddProperty(
                "StartTime",
                typeof(DateTime),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("StartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<StartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            startTime.AddAnnotation("Relational:ColumnType", "datetime");

            var version = runtimeEntityType.AddProperty(
                "Version",
                typeof(int),
                propertyInfo: typeof(OrleansRemindersTable).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrleansRemindersTable).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { serviceId, grainId, reminderName });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });
            key.AddAnnotation("Relational:Name", "PRIMARY");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "OrleansRemindersTable");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
